// This #include statement was automatically added by the Spark IDE.
#include "neopixel.h"

#define PIXEL_PIN D2
#define PIXEL_TYPE WS2812B

byte all[] = {//!
0002, //1,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,
0002, //1,0,
0000, //0,0,

//"
0012, //0,1,0,1,0,
0012, //0,1,0,1,0,
0024, //1,0,1,0,0,
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,

//#
0024, //0,1,0,1,0,0,
0024, //0,1,0,1,0,0,
0076, //1,1,1,1,1,0,
0024, //0,1,0,1,0,0,
0076, //1,1,1,1,1,0,
0024, //0,1,0,1,0,0,
0024, //0,1,0,1,0,0,
0000, //0,0,0,0,0,0,

//$
0010, //0,0,1,0,0,0,
0036, //0,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0002, //0,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//%
0042, //1,0,0,0,1,0,
0044, //1,0,0,1,0,0,
0004, //0,0,0,1,0,0,
0010, //0,0,1,0,0,0,
0020, //0,1,0,0,0,0,
0022, //0,1,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//&
0010, //0,0,1,0,0,0,
0024, //0,1,0,1,0,0,
0010, //0,0,1,0,0,0,
0032, //0,1,1,0,1,0,
0054, //1,0,1,1,0,0,
0044, //1,0,0,1,0,0,
0032, //0,1,1,0,1,0,
0000, //0,0,0,0,0,0,

//'
0002, //0,1,0,
0002, //0,1,0,
0004, //1,0,0,
0000, //0,0,0,
0000, //0,0,0,
0000, //0,0,0,
0000, //0,0,0,
0000, //0,0,0,

//(
0006, //0,0,1,1,0,
0010, //0,1,0,0,0,
0020, //1,0,0,0,0,
0020, //1,0,0,0,0,
0020, //1,0,0,0,0,
0010, //0,1,0,0,0,
0006, //0,0,1,1,0,
0000, //0,0,0,0,0,

//)
0030, //1,1,0,0,0,
0004, //0,0,1,0,0,
0002, //0,0,0,1,0,
0002, //0,0,0,1,0,
0002, //0,0,0,1,0,
0004, //0,0,1,0,0,
0030, //1,1,0,0,0,
0000, //0,0,0,0,0,

//*
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,
0022, //1,0,0,1,0,
0014, //0,1,1,0,0,
0022, //1,0,0,1,0,
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,
0000, //0,0,0,0,0,

//+
0000, //0,0,0,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0076, //1,1,1,1,1,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//,
0000, //0,0,
0000, //0,0,
0000, //0,0,
0000, //0,0,
0000, //0,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,

//-
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//.
0000, //0,0,
0000, //0,0,
0000, //0,0,
0000, //0,0,
0000, //0,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,

///
0002, //0,0,0,0,1,0,
0004, //0,0,0,1,0,0,
0004, //0,0,0,1,0,0,
0010, //0,0,1,0,0,0,
0020, //0,1,0,0,0,0,
0020, //0,1,0,0,0,0,
0040, //1,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//0
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0046, //1,0,0,1,1,0,
0052, //1,0,1,0,1,0,
0062, //1,1,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//1
0010, //0,0,1,0,0,0,
0030, //0,1,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//2
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0014, //0,0,1,1,0,0,
0020, //0,1,0,0,0,0,
0042, //1,0,0,0,1,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//3
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0014, //0,0,1,1,0,0,
0002, //0,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//4
0006, //0,0,0,1,1,0,
0012, //0,0,1,0,1,0,
0022, //0,1,0,0,1,0,
0042, //1,0,0,0,1,0,
0076, //1,1,1,1,1,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//5
0076, //1,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0074, //1,1,1,1,0,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//6
0014, //0,0,1,1,0,0,
0020, //0,1,0,0,0,0,
0040, //1,0,0,0,0,0,
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//7
0076, //1,1,1,1,1,0,
0042, //1,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0004, //0,0,0,1,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//8
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//9
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0002, //0,0,0,0,1,0,
0004, //0,0,0,1,0,0,
0030, //0,1,1,0,0,0,
0000, //0,0,0,0,0,0,

//:
0000, //0,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,
0000, //0,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,

//;
0000, //0,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,
0000, //0,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,

//<
0002, //0,0,0,1,0,
0004, //0,0,1,0,0,
0010, //0,1,0,0,0,
0020, //1,0,0,0,0,
0010, //0,1,0,0,0,
0004, //0,0,1,0,0,
0002, //0,0,0,1,0,
0000, //0,0,0,0,0,

//=
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//>
0020, //1,0,0,0,0,
0010, //0,1,0,0,0,
0004, //0,0,1,0,0,
0002, //0,0,0,1,0,
0004, //0,0,1,0,0,
0010, //0,1,0,0,0,
0020, //1,0,0,0,0,
0000, //0,0,0,0,0,

//?
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0004, //0,0,0,1,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//@
0074, //0,1,1,1,1,0,0,
0102, //1,0,0,0,0,1,0,
0132, //1,0,1,1,0,1,0,
0132, //1,0,1,1,0,1,0,
0136, //1,0,1,1,1,1,0,
0100, //1,0,0,0,0,0,0,
0074, //0,1,1,1,1,0,0,
0000, //0,0,0,0,0,0,0,

//A
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0076, //1,1,1,1,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//B
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//C
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//D
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//E
0076, //1,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0070, //1,1,1,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//F
0076, //1,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0070, //1,1,1,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//G
0036, //0,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0056, //1,0,1,1,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//H
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0076, //1,1,1,1,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//I
0016, //1,1,1,0,
0004, //0,1,0,0,
0004, //0,1,0,0,
0004, //0,1,0,0,
0004, //0,1,0,0,
0004, //0,1,0,0,
0016, //1,1,1,0,
0000, //0,0,0,0,

//J
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//K
0042, //1,0,0,0,1,0,
0044, //1,0,0,1,0,0,
0070, //1,1,1,0,0,0,
0044, //1,0,0,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//L
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//M
0042, //1,0,0,0,1,0,
0066, //1,1,0,1,1,0,
0052, //1,0,1,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//N
0042, //1,0,0,0,1,0,
0062, //1,1,0,0,1,0,
0052, //1,0,1,0,1,0,
0046, //1,0,0,1,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//O
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//P
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//Q
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0044, //1,0,0,1,0,0,
0032, //0,1,1,0,1,0,
0000, //0,0,0,0,0,0,

//R
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//S
0036, //0,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//T
0076, //1,1,1,1,1,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//U
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//V
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0024, //0,1,0,1,0,0,
0024, //0,1,0,1,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//W
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0052, //1,0,1,0,1,0,
0066, //1,1,0,1,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//X
0042, //1,0,0,0,1,0,
0024, //0,1,0,1,0,0,
0010, //0,0,1,0,0,0,
0024, //0,1,0,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//Y
0042, //1,0,0,0,1,0,
0024, //0,1,0,1,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//Z
0076, //1,1,1,1,1,0,
0002, //0,0,0,0,1,0,
0004, //0,0,0,1,0,0,
0010, //0,0,1,0,0,0,
0020, //0,1,0,0,0,0,
0040, //1,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//[
0016, //1,1,1,0,
0010, //1,0,0,0,
0010, //1,0,0,0,
0010, //1,0,0,0,
0010, //1,0,0,0,
0010, //1,0,0,0,
0016, //1,1,1,0,
0000, //0,0,0,0,

/* \ special comment for a special character */
0040, //1,0,0,0,0,0,
0020, //0,1,0,0,0,0,
0020, //0,1,0,0,0,0,
0010, //0,0,1,0,0,0,
0004, //0,0,0,1,0,0,
0004, //0,0,0,1,0,0,
0002, //0,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//]
0016, //1,1,1,0,
0002, //0,0,1,0,
0002, //0,0,1,0,
0002, //0,0,1,0,
0002, //0,0,1,0,
0002, //0,0,1,0,
0016, //1,1,1,0,
0000, //0,0,0,0,

//^
0010, //0,0,1,0,0,0,
0024, //0,1,0,1,0,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//_
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//`
0004, //1,0,0,
0004, //1,0,0,
0002, //0,1,0,
0000, //0,0,0,
0000, //0,0,0,
0000, //0,0,0,
0000, //0,0,0,
0000, //0,0,0,

//a
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0002, //0,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//b
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0054, //1,0,1,1,0,0,
0062, //1,1,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//c
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0040, //1,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//d
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0032, //0,1,1,0,1,0,
0046, //1,0,0,1,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//e
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0076, //1,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0036, //0,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//f
0006, //0,0,1,1,0,
0010, //0,1,0,0,0,
0036, //1,1,1,1,0,
0010, //0,1,0,0,0,
0010, //0,1,0,0,0,
0010, //0,1,0,0,0,
0010, //0,1,0,0,0,
0000, //0,0,0,0,0,

//g
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0036, //0,1,1,1,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0002, //0,0,0,0,1,0,
0074, //1,1,1,1,0,0,

//h
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0054, //1,0,1,1,0,0,
0062, //1,1,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//i
0002, //1,0,
0000, //0,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,

//j
0002, //0,0,0,0,1,0,
0000, //0,0,0,0,0,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,

//k
0020, //1,0,0,0,0,
0020, //1,0,0,0,0,
0022, //1,0,0,1,0,
0024, //1,0,1,0,0,
0030, //1,1,0,0,0,
0024, //1,0,1,0,0,
0022, //1,0,0,1,0,
0000, //0,0,0,0,0,

//l
0004, //1,0,0,
0004, //1,0,0,
0004, //1,0,0,
0004, //1,0,0,
0004, //1,0,0,
0004, //1,0,0,
0002, //0,1,0,
0000, //0,0,0,

//m
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0064, //1,1,0,1,0,0,
0052, //1,0,1,0,1,0,
0052, //1,0,1,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//n
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0074, //1,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//o
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0034, //0,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//p
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0054, //1,0,1,1,0,0,
0062, //1,1,0,0,1,0,
0042, //1,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,

//q
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0032, //0,1,1,0,1,0,
0046, //1,0,0,1,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0002, //0,0,0,0,1,0,
0002, //0,0,0,0,1,0,

//r
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0054, //1,0,1,1,0,0,
0062, //1,1,0,0,1,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0040, //1,0,0,0,0,0,
0000, //0,0,0,0,0,0,

//s
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0036, //0,1,1,1,1,0,
0040, //1,0,0,0,0,0,
0034, //0,1,1,1,0,0,
0002, //0,0,0,0,1,0,
0074, //1,1,1,1,0,0,
0000, //0,0,0,0,0,0,

//t
0004, //0,1,0,0,
0004, //0,1,0,0,
0016, //1,1,1,0,
0004, //0,1,0,0,
0004, //0,1,0,0,
0004, //0,1,0,0,
0002, //0,0,1,0,
0000, //0,0,0,0,

//u
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//v
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0024, //0,1,0,1,0,0,
0010, //0,0,1,0,0,0,
0000, //0,0,0,0,0,0,

//w
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0052, //1,0,1,0,1,0,
0052, //1,0,1,0,1,0,
0036, //0,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//x
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0024, //0,1,0,1,0,0,
0010, //0,0,1,0,0,0,
0024, //0,1,0,1,0,0,
0042, //1,0,0,0,1,0,
0000, //0,0,0,0,0,0,

//y
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0042, //1,0,0,0,1,0,
0036, //0,1,1,1,1,0,
0002, //0,0,0,0,1,0,
0074, //1,1,1,1,0,0,

//z
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0076, //1,1,1,1,1,0,
0004, //0,0,0,1,0,0,
0010, //0,0,1,0,0,0,
0020, //0,1,0,0,0,0,
0076, //1,1,1,1,1,0,
0000, //0,0,0,0,0,0,

//{
0006, //0,0,1,1,0,
0010, //0,1,0,0,0,
0010, //0,1,0,0,0,
0020, //1,0,0,0,0,
0010, //0,1,0,0,0,
0010, //0,1,0,0,0,
0006, //0,0,1,1,0,
0000, //0,0,0,0,0,

//|
0002, //1,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,
0002, //1,0,
0002, //1,0,
0002, //1,0,
0000, //0,0,

//}
0030, //1,1,0,0,0,
0004, //0,0,1,0,0,
0004, //0,0,1,0,0,
0002, //0,0,0,1,0,
0004, //0,0,1,0,0,
0004, //0,0,1,0,0,
0030, //1,1,0,0,0,
0000, //0,0,0,0,0,

//~
0031, //0,1,1,0,0,1,
0046, //1,0,0,1,1,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
0000, //0,0,0,0,0,0,
};

int lengths[] = {2,5,6,6,6,6,3,5,5,5,6,2,6,2,6,6,6,6,6,6,6,6,6,6,6,2,2,5,6,5,6,7,6,6,6,6,6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,6,4,6,6,3,6,6,6,6,6,5,6,6,2,6,5,3,6,6,6,6,6,6,6,4,6,6,6,6,6,6,5,2,5,6};

// Number of RGB LEDs in strand:
int LEDsW = 10;
int LEDsH = 8;

//pixel pin is D2

Adafruit_NeoPixel strip = Adafruit_NeoPixel(LEDsW * LEDsH, PIXEL_PIN, PIXEL_TYPE);

void setup() {
  Serial.begin(9600);
  strip.begin();
  strip.show();
}

void loop() {
  scrollImage("hello");
}


void scrollImage(char* strIn){
  
  int maxWidth = 0;
  for (int i = 0; i < strlen(strIn); i++){
    char thisChar = strIn[i];
    maxWidth += lengths[thisChar-33];
  }
  
 for (int test = 0; test < 5; test++){
  
  int colThreshold = lengths[strIn[0]-33];
  int colOffset = 0;
  int charOfInterest = 0;

  for (int column = 0; column < LEDsW; column++){
      if (column == maxWidth){ // column beyond string length, restart string
        colThreshold = lengths[strIn[0]-33];
        colOffset = 0;
        charOfInterest = 0;
      }
      else if (column == colThreshold){ //column beyond current char threshhold, increase threshhold
        colOffset = column;
        charOfInterest++;
        colThreshold += lengths[strIn[charOfInterest] - 33];
      }
      
      for (int row=0; row < LEDsH; row++){
            int pixel = getCharPixel(strIn[charOfInterest], row, column - colOffset);
            setLED(column+test, row, pixel);
      }
  }
  
 strip.show();
  delay(1000);
  
}
  
  /*for (int row = 0; row< LEDsH; row++){
    for (int column = 0; column < lengths[thisChar-33]; column++){
      int pixel = getCharPixel(thisChar, row - rowOffset, column);
      Serial.print(pixel);
    }
    Serial.print('\n');
  }*/




  /*int maxWidth = 0;
  for (int i = 0; i < strlen(strIn); i++){
    char thisChar = strIn[i];
    maxWidth += lengths[thisChar-33];
  }
  
  //go through every column in the string
 for (int i=0; i < maxWidth; i++){
     int lengthOffset = 0;
      //if the column is within the size of the window
      if(i>=xStart && (i<(xStart + LEDsW))){
        char thisChar = strIn[0];
        int column = 1;
        for (int row = 0; row< LEDsH; row++){
          for (int column = 0; column < lengths(thisChar-33); column++){
            int pixel = getCharPixel(thisChar, row, column);
            Serial.println("begin");
            Serial.println(row);
            Serial.println(column);
            Serial.println(pixel);
            Serial.println("end");
            setLED(column, row, pixel);
          }
        }
        lengthOffset++;
        if (lengthOffset > lengths[thisChar-33]){
            lengthOffset = 0;
        }
      }
  }
  
  xStart++;
  //reset xStart if it's at the end of the string
  if (xStart > maxWidth){
      xStart = 0;
  }
  strip.show();
  delay(2);*/
}

int getCharPixel(char thisChar, int down, int left){
    String row = String(all[((thisChar-33)*8)+down], BIN);
    
    int rowLength = row.length();
    int length = lengths[thisChar - 33];
    
    if(rowLength < length && (left < (length - rowLength))){
        return 0;
    }
    else {
        int indexOfPixel = left - (length - rowLength);
        return row.substring(indexOfPixel, indexOfPixel+1).toInt();
    }
    
}

void setLED(uint32_t x, uint32_t y, uint32_t color){
  int ledAddr = (LEDsH * ((LEDsW-1)-x)) + (((x&1)==0)?((LEDsH-1)-y):(y));
  strip.setPixelColor(ledAddr, color==0?color:Wheel(color-1));
}


uint32_t Wheel(uint16_t WheelPos)
{
  byte r, g, b;
  switch(WheelPos / 128)
  {
    case 0:
      r = 127 - WheelPos % 128;   //Red down
      g = WheelPos % 128;      // Green up
      b = 0;                  //blue off
      break; 
    case 1:
      g = 127 - WheelPos % 128;  //green down
      b = WheelPos % 128;      //blue up
      r = 0;                  //red off
      break; 
    case 2:
      b = 127 - WheelPos % 128;  //blue down 
      r = WheelPos % 128;      //red up
      g = 0;                  //green off
      break; 
  }
  return(strip.Color(r,g,b));
}

  /*
  int stringX = 0;

  for(int i=0; i<maxWidth; i++){
    //go through every character 
    for(int charIndex = 0; charIndex < strlen(strIn); charIndex++){
      char c = strIn[charIndex];
      int charWidth = lengths[c-33];
      
      //iterate through that character, column by column
      for(int charX = 0; charX < charWidth; charX++){
        int screenX = stringX - i;

        if (0 <= screenX && screenX < LEDsW){
          for(int screenY = 0; screenY < LEDsH; screenY++){
            int color = getCharPixel(c, charX, screenY);
            setLED(screenX, screenY, color);
          }
        }

        stringX++;
      }
    }
    strip.show();
    delay(2);
  }
}

int getCharPixel(char c, int x, int y){
  int charIdx = ((c+1) - 33) * 7; //each character is 8 high
  int charLen = lengths[c - 33];
  String charLine = String(pgm_read_byte(&all[charIdx - y]), BIN);

  Serial.println(String(x) + " " + String(y) + " " + charLine);

  if (charLine.length() < x+1) {
    return 0;//outInt = charLine.toInt();
  }else{
    return charLine.substring(x, x+1).toInt();
  }
  
 // return outInt;
}
*/